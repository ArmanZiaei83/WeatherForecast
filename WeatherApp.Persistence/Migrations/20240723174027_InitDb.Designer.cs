// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.Persistence.Context;

#nullable disable

namespace WeatherApp.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240723174027_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherApp.Domain.Entities.Hourly", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float>("RelativeHumidity2M")
                        .HasColumnType("real");

                    b.Property<float>("Temperature2M")
                        .HasColumnType("real");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<long>("WeatherForecastId")
                        .HasColumnType("bigint");

                    b.Property<float>("WindSpeed10M")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("Hourly", (string)null);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.HourlyUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RelativeHumidity2M")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature2M")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WeatherForecastId")
                        .HasColumnType("bigint");

                    b.Property<string>("WindSpeed10M")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId")
                        .IsUnique();

                    b.ToTable("HourlyUnits", (string)null);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float>("Elevation")
                        .HasColumnType("real");

                    b.Property<float>("GenerationTimeMs")
                        .HasColumnType("real");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimezoneAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtcOffsetSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts", (string)null);
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.Hourly", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.WeatherForecast", "WeatherForecast")
                        .WithMany("Hourly")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.HourlyUnit", b =>
                {
                    b.HasOne("WeatherApp.Domain.Entities.WeatherForecast", "WeatherForecast")
                        .WithOne("HourlyUnit")
                        .HasForeignKey("WeatherApp.Domain.Entities.HourlyUnit", "WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("WeatherApp.Domain.Entities.WeatherForecast", b =>
                {
                    b.Navigation("Hourly");

                    b.Navigation("HourlyUnit");
                });
#pragma warning restore 612, 618
        }
    }
}
